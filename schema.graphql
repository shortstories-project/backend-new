scalar Upload
scalar Date

type Me {
  id: Int!
  username: String!
  photo: String
  info: String
  email: String!
  isVerified: Boolean!
}

type User {
  id: Int!
  username: String!
  photo: String
  info: String
}

type SuccessMessage {
  message: String
}

type RequestReset {
  email: String!
}

type Stats {
  likes: [User!]!
  dislikes: [User!]!
  comments: Int!
  views: [User]!
}

type Story {
  id: Int!
  title: String!
  body: String!
  user: User!
  stats: Stats!
  genre: Genre
  length: Int!
  createdAt: Date!
}

type Reaction {
  id: Int!
  state: String!
  userId: Int!
  storyId: Int!
}

type Genre {
  id: Int!
  name: String!
}

type View {
  id: Int!
  userId: ID
  storyId: Int!
}

type StoryConnection {
  edges: [Story]!
  pageInfo: PageInfoStories!
}

type Comment {
  id: Int!
  commentId: ID
  body: String
  user: User!
  createdAt: Date!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String!
}

type PageInfoStories {
  offset: Int!
  limit: Int!
}

type Query {
  # Users
  me: Me
  user(id: Int!): User

  # Stories
  stories(
    offset: Int = 0
    limit: Int = 20
    userId: ID
    isLiked: Boolean = false
    length: String
    genres: [ID]
    mostLiked: Boolean = false
    mostViewed: Boolean = false
    mostCommented: Boolean = false
  ): StoryConnection!
  story(id: Int!): Story!
  reactions(storyId: Int!): [Reaction!]!
  genres: [Genre]

  # Comments
  comments(cursor: String, limit: Int = 10, storyId: Int!): [Comment!]!
}

type Mutation {
  # User
  signUp(username: String!, email: String!, password: String!): Me!
  signIn(login: String!, password: String!): Me!
  signOut: SuccessMessage
  verifyUser(token: String!): Me!
  checkUserExists(login: String!): Boolean!
  requestReset(login: String!): RequestReset
  resetPassword(
    token: String!
    password: String!
    passwordConfirmation: String!
  ): Me!
  updateUser(username: String!, info: String): Me!
  postPhoto(
    file: Upload!
    width: Float!
    height: Float!
    x: Float!
    y: Float!
  ): Me!

  # Story
  createStory(title: String!, body: String!, genreId: Int!): Story!
  updateStory(id: Int!, title: String!, body: String!, genreId: Int!): Story!
  likeStory(id: Int!): Reaction!
  dislikeStory(id: Int!): Reaction!
  viewStory(id: Int!): View!
  deleteStory(id: Int!): Story!

  # Comment
  createComment(id: Int!, body: String!, commentId: ID): Comment!
  updateComment(id: Int!, body: String!): Comment!
  deleteComment(id: Int!, hasChildren: Boolean!, commentId: ID): Comment!
}
